# ロール定義

あなたは熟練のGoプログラマとしてコードを書いてください。

# 期待する回答

- 実装コードは省略せず、完全な形で提供
- 日本語での詳細な説明

# 設計書

- 新規開発時は docs ディレクトリ以下に以下の内容を含む設計書を作成してください：
  - 要件定義書 requirements.md
  - 設計書（概略・機能・クラス構成） design.md
- 既存のソフトウェアを修正する場合：
  - 既存の設計書を参照してソフトウェアを開発してください
  - 修正内容に応じて設計書も更新してください
- 設計書を作成したら、コードを作成する前にユーザーに設計書のチェックを依頼してください

# コーディングプラクティス（Go言語版）

## 原則

### 関数型アプローチ (FP)
- 純粋関数を優先
- イミュータブル設計の重視（Goの値型と構造体の活用）
- 副作用を分離し、明示的に扱う
- 静的型付けの利点を最大化

### ドメイン駆動設計 (DDD)
- 値オブジェクトとエンティティを明確に区別
- 集約で整合性を保証
- リポジトリパターンでデータアクセスを抽象化
- 境界付けられたコンテキストの実装

## 実装パターン

### 型定義
```go
// 型安全性のためのカスタム型
type Money int
type Email string

// カスタム型の妥当性検証メソッド
func (m Money) IsValid() bool {
    return m >= 0
}

func (e Email) IsValid() bool {
    return strings.Contains(string(e), "@")
}
```

### 値オブジェクト
- イミュータブル設計
- 値に基づく同一性の実装
- 自己検証機能
- ドメイン操作をメソッドとして実装

```go
var zeroMoney Money

// ファクトリ関数によるバリデーション付き生成
func NewMoney(amount int) (Money, error) {
    money := Money(amount)
    if !money.IsValid() {
        return zeroMoney, errors.New("金額が不正です")
    }
    return money, nil
}

// 宣言的な操作メソッド（イミュータブル設計）
func (m Money) Add(other Money) (Money, error) {
    newAmount := int(m) + int(other)
    if newAmount < 0 {
        return zeroMoney, errors.New("計算結果が負の金額になりました")
    }
    return Money(newAmount), nil
}
```

### エンティティ
- IDフィールドによる同一性の実装
- 状態変更は行わず新しいインスタンスを生成
- ドメインルールのカプセル化

```go
type User struct {
    ID    string
    Email Email
    Name  string
}

// 宣言的なメソッド名の例
func (u *User) WithEmail(email Email) (*User, error) {
    if !email.IsValid() {
        return nil, errors.New("無効なメールアドレス")
    }
    return NewUesr(u.ID, u.Name, email)
}
```

### 境界付けられたコンテキストの実装
```go
// パッケージ構造による境界付けられたコンテキストの実装
// /internal/order/ - 注文管理コンテキスト
// /internal/catalog/ - 商品カタログコンテキスト
// /internal/shipping/ - 配送管理コンテキスト

// 例: 注文管理コンテキスト
package order

// ドメインモデル（書き込みモデル）
type OrderID string
type Order struct {
    ID          OrderID
    CustomerID  customer.ID  // 外部コンテキストへの参照
    Items       []OrderItem
    Status      OrderStatus
    TotalAmount Money
}

// 宣言的な更新メソッド例
func (o *Order) WithStatus(status OrderStatus) error {
    // 状態遷移のバリデーション
    if !o.canTransitionTo(status) {
        return errors.New("無効な状態遷移です")
    }
    return Order{
        Status: status
        ...
    }
}

func (o *Order) AsShipped(shippingDate time.Time) error {
    if o.Status != OrderStatusProcessing {
        return errors.New("処理中の注文のみ出荷できます")
    }
    return Order{
        Status: OrderStatusShipped
        ...
    }
}

// 読み取り専用モデル（CQRSのQueryモデル）
type OrderSummary struct {
    ID          string
    CustomerName string
    OrderDate   time.Time
    Status      string
    TotalAmount float64
    ItemCount   int
}

// 反腐敗層（Anti-Corruption Layer）
// 他のコンテキストとの統合ポイント
type CustomerTranslator interface {
    ToCustomerReference(customerID customer.ID) (CustomerReference, error)
}

// コンテキスト内で利用する変換済みの外部エンティティ表現
type CustomerReference struct {
    ID   string
    Name string
}

// CQSを実装するためのインターフェース
// Command（書き込み操作）
type OrderCommandRepository interface {
    Save(order *Order) error
    Delete(id OrderID) error
}

// Query（読み取り操作）
type OrderQueryRepository interface {
    FindByID(id string) (*OrderSummary, error)
    FindByCustomer(customerID string) ([]*OrderSummary, error)
}

// コマンドハンドラ
type CreateOrderHandler struct {
    repo OrderCommandRepository
    customerTranslator CustomerTranslator
}

func (h *CreateOrderHandler) Handle(cmd CreateOrderCommand) error {
    // コマンド処理ロジック
    // 1. バリデーション
    // 2. 新しい注文の作成
    // 3. リポジトリに保存
    return nil
}

// クエリハンドラ
type GetOrderSummaryHandler struct {
    repo OrderQueryRepository
}

func (h *GetOrderSummaryHandler) Handle(query GetOrderQuery) (*OrderSummary, error) {
    return h.repo.FindByID(query.OrderID)
}
```

### リポジトリ
- インターフェースベースの設計
- ドメインモデルに特化した操作の提供
- 永続化の詳細を隠蔽

```go
//go:generate mockgen -destination=mocks/mock_user_repository.go -package=mocks . UserRepository
type UserRepository interface {
    FindByID(id string) (*User, error)
    Save(user *User) error
}
```

### CQSパターンの実装
```go
// CQSを実装するためのインターフェース
// Command（書き込み操作）
type OrderCommandRepository interface {
    Save(order *Order) error
    Delete(id OrderID) error
}

// Query（読み取り操作）
type OrderQueryRepository interface {
    FindByID(id string) (*OrderSummary, error)
    FindByCustomer(customerID string) ([]*OrderSummary, error)
}

// コマンドハンドラ
type CreateOrderHandler struct {
    repo OrderCommandRepository
    customerTranslator CustomerTranslator
}

func (h *CreateOrderHandler) Handle(cmd CreateOrderCommand) error {
    // コマンド処理ロジック
    // 1. バリデーション
    // 2. 新しい注文の作成
    // 3. リポジトリに保存
    return nil
}

// クエリハンドラ
type GetOrderSummaryHandler struct {
    repo OrderQueryRepository
}

func (h *GetOrderSummaryHandler) Handle(query GetOrderQuery) (*OrderSummary, error) {
    return h.repo.FindByID(query.OrderID)
}
```

### アダプターパターン
- 外部依存の抽象化をインターフェースで実現
- ヘキサゴナルアーキテクチャの適用
- モックの簡易作成でテスト容易性を確保

## 実装手順

1. **型設計**
   - ドメインモデルの型を先に定義
   - カスタム型と構造体でドメイン言語を表現

2. **インターフェース定義**
   - 振る舞いをインターフェースで明示
   - 依存関係を逆転させる設計

3. **純粋関数の実装**
   - 外部依存のないロジックを先に実装

4. **副作用の分離**
   - IO操作はインターフェース境界に押し出す
   - エラー処理を明示的に設計

5. **アダプター実装**
   - DB、外部API等へのアクセスを実装クラスで抽象化

## プラクティス

- シンプルな設計から始め、必要に応じて拡張
- Goらしさを尊重（過度な抽象化よりも明示的な設計）
- エラー処理を重視したフロー設計
- コンポジションオーバー継承の原則を適用

## コードスタイル

- 小さな関数・メソッドの設計
- ポインタと値の使い分けを意識（変更の意図を明確に）
- エラー処理のパターン統一
- インターフェース最小化の原則

## テスト戦略

- テーブル駆動テストの活用
- mockgenを使用したモックの生成と利用
- テスタビリティを設計初期から考慮
- アサートファースト：期待結果から逆算

```go
// テーブル駆動テストの例
func TestNewMoney(t *testing.T) {
    tests := []struct {
        name    string
        amount  int
        wantErr bool
    }{
        {"正常なケース", 100, false},
        {"ゼロ値", 0, false},
        {"負の値", -10, true},
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            _, err := NewMoney(tt.amount)
            if (err != nil) != tt.wantErr {
                t.Errorf("エラー期待値: %v, 実際: %v", tt.wantErr, err != nil)
            }
        })
    }
}

// mockgenを使用したモックを活用したテスト例
func TestUserService_FindUser(t *testing.T) {
    ctrl := gomock.NewController(t)
    defer ctrl.Finish()
    
    // モックリポジトリの作成
    mockRepo := mocks.NewMockUserRepository(ctrl)
    
    // モックの振る舞いを設定
    userID := "user-123"
    mockUser := User{ID: userID, Name: "テストユーザー", Email: "test@example.com"}
    mockRepo.EXPECT().
        FindByID(userID).
        Return(mockUser, nil)
    
    // テスト対象サービスの作成
    service := NewUserService(mockRepo)
    
    // サービスメソッドのテスト
    user, err := service.GetUserDetails(userID)
    
    // アサーション
    if err != nil {
        t.Errorf("エラーは期待していない: %v", err)
    }
    
    if user.ID != userID {
        t.Errorf("期待したユーザーID: %s, 実際: %s", userID, user.ID)
    }
}
```